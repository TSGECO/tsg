[workspace]
allow_dirty = false # allow updating repositories with uncommitted changes
# changelog_config = "config/git-cliff.toml" # use a custom git-cliff configuration
changelog_update = true     # disable changelog updates
dependencies_update = false # update dependencies with `cargo update`
git_release_enable = true   # disable GitHub/Gitea releases
pr_labels = ["release"]     # add the `release` label to the release Pull Request
publish_allow_dirty = false # add `--allow-dirty` to `cargo publish`
semver_check = false        # disable API breaking changes checks
publish_timeout = "10m"     # set a timeout for `cargo publish`
release_commits = "^feat:"  # prepare release only if at least one commit matches a regex

# [[package]] # the double square brackets define a TOML table array
# name = "package_a"
# changelog_include = [
#     "package_b",
# ] # include commits from `package_b` in the changelog
# changelog_path = "docs/CHANGELOG.md" # use a custom changelog path for `package_a`
# changelog_update = true # enable changelog update for `package_a`
# git_release_enable = true # enable GitHub/Gitea releases for `package_a`
# publish = false # disable `cargo publish` for `package_a`

# [[package]]
# name = "package_b"
# semver_check = true # enable semver_check for `package_b`
# publish_no_verify = true # add `--no-verify` to `cargo publish` for `package_b`
# publish_features = [
#     "a",
#     "b",
# ] # add `--features=a,b` to `cargo publish` for `package_b`

# [[package]]
# name = "py-deepbiop"
# release = false           # don't process this package
# publish = false
# changelog_update = true
# git_release_enable = true
# git_tag_enable = true

[changelog]
protect_breaking_commits = true # always include commits with breaking changes in the changelog
header = """# Changelog

## [Unreleased]
"""

body = """

{% macro print_commit(commit) -%}
    - {% if commit.scope %}*({{ commit.scope }})* {% endif %}\
      {% if commit.breaking %}[**breaking**] {% endif %}\
      {{ commit.message | upper_first }} - \
      ([{{ commit.id | truncate(length=7, end="") }}]({{ remote.link }}/commit/{{ commit.id }}))\
{% endmacro -%}

{% if version %}\
    {% if previous.version %}\
        ## [{{ version | trim_start_matches(pat="v") }}]({{ release_link }})
    {% else %}\
        ## [{{ version | trim_start_matches(pat="v") }}]
    {% endif %}\
{% endif %}\

{% for group, commits in commits
| filter(attribute="merge_commit", value=false)
| unique(attribute="message")
| group_by(attribute="group") %}
    ### {{ group | striptags | trim | upper_first }}

    {% for commit in commits
    | filter(attribute="scope")
    | sort(attribute="scope") %}
        {{ self::print_commit(commit=commit) }}
    {%- endfor -%}
    {% raw %}\n{% endraw %}\
    {%- for commit in commits %}
        {%- if not commit.scope -%}
            {{ self::print_commit(commit=commit) }}
        {% endif -%}
    {% endfor -%}
{% endfor %}\n
"""
